# -*- mode: org; -*-
#+STARTUP: overview
#+TITLE: My Literate Emacs Configuration
#+AUTHOR: Phil Hwang

[[https://melpa.org/#/literate-elisp][file:https://melpa.org/packages/literate-elisp-badge.svg]]
[[https://stable.melpa.org/#/literate-elisp][file:https://stable.melpa.org/packages/literate-elisp-badge.svg]]

* COMMENT How to use it
  #+BEGIN_SRC sh
    cd
    git clone https://github.com/bbingju/literate-emacs-configuration.git .emacs.d
  #+END_SRC

* First of All

** Speed-up at startup
   #+BEGIN_SRC emacs-lisp
     (let* ((normal-gc-cons-threshold (* 20 1024 1024))
	    (init-gc-cons-threshold (* 128 1024 1024)))
       (setq gc-cons-threshold init-gc-cons-threshold)
       (add-hook 'emacs-startup-hook
		 (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
   #+END_SRC

** Add load-path

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
   #+END_SRC

** ELPA configuration
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			 (not (gnutls-available-p))))
	    (proto (if no-ssl "http" "https")))
       ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
       (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
       ;; (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
       (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
       (when (< emacs-major-version 24)
	 ;; For important compatibility libraries like cl-lib
	 (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
     (unless package--initialized (package-initialize t))
   #+END_SRC

** use-package

   If [[https://github.com/jwiegley/use-package][use-package]] is not installed, install it from the ELPA.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

** My own fuctions & macros

   #+BEGIN_SRC emacs-lisp
     (defmacro when-linux (&rest body)
       (list 'if (string-match "linux" (prin1-to-string system-type))
		     (cons 'progn body)))

     (defmacro when-windows (&rest body)
       (list 'if (string-match "windows" (prin1-to-string system-type))
	     (cons 'progn body)))

     (defmacro when-mac (&rest body)
       (list 'if (string-match "darwin" (prin1-to-string system-type))
	     (cons 'progn body)))
   #+END_SRC

** Add a path to Environment Variable
   #+BEGIN_SRC emacs-lisp
     (when-mac (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
	       (setq exec-path (append exec-path '("/usr/local/bin"))))
   #+END_SRC

** Input method & coding system

   I need this configuration.

   #+BEGIN_SRC emacs-lisp
     (when enable-multibyte-characters
       (set-language-environment "Korean")
       (setq-default file-name-coding-system 'utf-8)
       (setq default-input-method "korean-hangul")
       (prefer-coding-system 'utf-8)
       (set-default-coding-systems 'utf-8))

     (when-windows (set-file-name-coding-system 'euc-kr)
		   (global-set-key (kbd "S-SPC") 'toggle-input-method)
		   (global-set-key (kbd "<Hangul>") 'toggle-input-method)
		   (global-set-key (kbd "<Hangul_Hanja>") 'hangul-to-hanja-conversion))
   #+END_SRC

   MacOS 일 경우, 파일시스템에서 한글이 제대로 나오게 하기 위해서 아래와 같이 설정한다.

   #+BEGIN_SRC emacs-lisp
     (when-mac (require 'ucs-normalize)
	       (set-file-name-coding-system 'utf-8-hfs)
	       (setq default-process-coding-system '(utf-8-hfs . utf-8-hfs)))
   #+END_SRC

** File-related tweaks
   #+begin_src emacs-lisp
     (use-package files
       :ensure nil
       :config
       (setq confirm-kill-processes nil
	     make-backup-files nil))
   #+end_src

** Automatically refreshes the buffer for changes outside of emacs
   Auto refreshes every 3 seconds.

   #+begin_src emacs-lisp
     (use-package autorevert
       :ensure nil
       :config
       (global-auto-revert-mode +1)
       (setq auto-revert-interval 3
	     auto-revert-check-vc-info t
	     auto-revert-non-file-buffers t
	     auto-revert-verbose nil))
   #+end_src

** Load a custom file
   If the file =~/.emacs.d/.custom.el= exist, load it.

   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name ".custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+END_SRC

** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :diminish helm-mode
       :init
       (progn
	 (require 'helm-config)
	 (setq helm-M-x-requires-pattern nil
	       helm-split-window-inside-p t ; open helm buffer inside
					     ; current window, not occupy
					     ; whole other window
	       helm-move-to-line-cycle-in-source  t ; move to end or
					     ; beginning of source
					     ; when reaching top or
					     ; bottom of source.
	       helm-ff-search-library-in-sexp t ; search for library in
					     ; `require' and
					     ; `declare-function' sexp.
	       helm-scroll-amount 8 ; scroll 8 lines other window using
					     ; M-<next>/M-<prior>
	       helm-ff-file-name-history-use-recentf t)
	 (helm-mode))
       :bind (("C-c h" . helm-command-prefix)
	      ("C-x C-f" . helm-find-files)
	      ("C-x b" . helm-buffers-list)
	      ("C-x C-b" . helm-buffers-list)
	      ("C-x c y" . helm-yas-complete)
	      ("C-x c Y" . helm-yas-create-snippet-on-region)
	      ("M-y" . helm-show-kill-ring)
	      ("M-x" . helm-M-x)
	      ;; ("C-i" . helm-execute-persistent-action)
	      ;; ("C-z" . helm-select-action)
	      ))

     (use-package helm-descbinds
       :ensure t
       :defer 7
       :bind (("C-h b" . helm-descbinds)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package helm-swoop
       :ensure t
       :bind (("C-S-s" . helm-swoop)
	      ("M-i" . helm-swoop)
	      ("M-s s" . helm-swoop)
	      ("M-s M-s" . helm-swoop)
	      ("M-I" . helm-swoop-back-to-last-point)
	      ("C-c M-i" . helm-multi-swoop)
	      ("C-x M-i" . helm-multi-swoop-all)
	      ("M-i" . helm-multi-swoop-all-from-helm-swoop)
	      :map isearch-mode-map
	      ("M-i" . helm-swoop-from-isearch)))
   #+END_SRC

   The default =C-x c= is quite close to =C-x C-c=, which quits Emacs.
   Changed to =C-c h=. Note: We must set =C-c h= globally, because we
   cannot change `helm-command-prefix-key' once `helm-config' is loaded.
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c h") 'helm-command-prefix)
     (global-unset-key (kbd "C-x c"))
   #+END_SRC

** Others

   #+begin_src emacs-lisp
     (global-set-key (kbd "M-u") 'upcase-dwim)
     (global-set-key (kbd "M-l") 'downcase-dwim)
     (global-set-key (kbd "M-c") 'capitalize-dwim)
   #+end_src

   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :config (which-key-mode))
   #+end_src

* Appearance

** Basic appearance
   Hide =tool-bar= and =scroll-bar=.

   #+BEGIN_SRC emacs-lisp
     (mapc
      (lambda (mode)
	(if (fboundp mode)
	    (funcall mode -1)))
      '(tool-bar-mode scroll-bar-mode))
   #+END_SRC

** Font setting

   #+BEGIN_SRC emacs-lisp
     (when (display-graphic-p)
       (require 'fontutil)

       (when-linux (fontutil/set-font "ubuntu-16"))

       (when-mac (fontutil/set-font "firacode-14")
		 (setq-default line-spacing 3))

       (when-windows (fontutil/set-font "d2coding-14")
		     (setq-default line-spacing 4)))
   #+END_SRC

** doom-themes

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :init (load-theme 'doom-one t)
       :config
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (doom-themes-visual-bell-config)
       (doom-themes-neotree-config)
       (doom-themes-org-config))
   #+END_SRC

** dome-modeline
   This package requires the fonts included with =all-the-icons= to be
   installed. Run ~M-x all-the-icons-install-fonts~ to do so.
   
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :defer t
       :hook (after-init . doom-modeline-init))
   #+END_SRC

** line numbers
   #+BEGIN_SRC emacs-lisp
     (use-package display-line-numbers-mode
       :hook (prog-mode text-mode conf-mode))
   #+END_SRC

* Orgmode
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t

      :init (setq org-directory my-org-directory
		  org-agenda-files my-org-agenda-files
		  org-default-notes-file (concat org-directory "/notes.org")
		  org-export-coding-system 'utf-8
		  org-confirm-babel-evaluate nil)

      :mode (("\\.org\\'" . org-mode))

      :bind (("C-c l" . org-store-link)
	     ("C-c c" . org-capture)
	     ("C-c a" . org-agenda))

      :config
      (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)
							       (python . t)
							       (ditaa . t)
							       (emacs-lisp . t)))
      (set-register ?l `(cons 'file ,(concat org-directory "/links.org")))
      ;; refer to http://orgmode.org/manual/Template-elements.html#Template-elements
      (setq org-capture-templates
	    '(("l" "Link" entry (file+headline org-default-notes-file "Links") 
	       "* %^L%? %^g" :prepend t)
	      ("t" "To Do Item" entry (file+headline org-default-notes-file "To Do Items") 
	       "* TODO %?\n  %T" :prepend t)
	      ("r" "To Read Item" entry (file+headline org-default-notes-file "To Read Items") 
	       "* %?\n  %T" :prepend t)))

      (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

      (setq org-feed-alist
	    '(("Slashdot"
	       "http://rss.slashdot.org/Slashdot/slashdot"
	       (concat org-directory "/feeds.org")
	       "Slashdot Entries")))
      )


    (use-package org-bullets
      :requires org
      :ensure t
      :hook (org-mode . (lambda () (org-bullets-mode 1))))
  #+END_SRC

  Override line-numbers-mode in org-mode.

  #+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0)))
  #+end_src

* Programming

** projectile
   ~projectile-indexing-method~ 를 =alien= 으로 지정하여 Windows에서도
   이 방법을 쓰도록 강제한다. 자세한 내용은 [[https://github.com/bbatsov/projectile/issues/1183][이슈]]에서 확인할 수 있다.
   메뉴얼은 [[https://www.projectile.mx/en/latest/][여기]]에서 볼 수 있다.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :requires (helm)
       :bind (:map projectile-mode-map
		   ("C-c p" . 'projectile-command-map))
       :config
       (setq projectile-enable-caching t
	     projectile-indexing-method 'alien
	     projectile-completion-system 'helm)
       (projectile-mode +1))
   #+END_SRC

** helm-projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       :requires (helm projectile)
       :config (helm-projectile-on))
   #+END_SRC

** COMMENT helm-gtags
   #+BEGIN_SRC emacs-lisp
     (use-package helm-gtags
       :ensure t
       :bind (:map helm-gtags-mode-map
		   ("M-." . helm-gtags-find-tag)
		   ("M-r" . helm-gtags-find-rtag)
		   ("M-s" . helm-gtags-find-symbol)
		   ("M-g M-p" . helm-gtags-parse-file)
		   ("C-c <" . helm-gtags-previous-history)
		   ("C-c >" . helm-gtags-next-history)
		   ("M-," . helm-gtags-pop-stack))
       :config (setq helm-gtags-path-style 'relative)
       :hook ((c-mode c++-mode asm-mode) . helm-gtags-mode))
   #+END_SRC

** magit
   I need this definitly. This is an awesome plugin as git client.

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :commands (magit-init
		  magit-status)
       :bind ("C-x g" . magit-status))
   #+END_SRC

** diff-hl
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :init (global-diff-hl-mode)
       :config
       (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))
   #+END_SRC

** flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :hook (after-init . global-flycheck-mode)
       :config
       (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled)))
   #+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer 5
       :diminish yas-minor-mode
       :config (yas-global-mode 1))

     (use-package yasnippet-snippets
       :ensure t
       :after yasnippet)
   #+END_SRC

** company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :bind (("C-M-i" . company-complete)
	      :map company-active-map
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous)
	      ("<tab>" . company-complete-common-or-cycle)
	      :map company-search-map
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous))
       :init (add-hook 'after-init-hook `global-company-mode))
   #+END_SRC

** lsp-mode
   A mode for Language Server Protocol.

   sh-mode에서 활성화되려면 [[https://github.com/mads-hartmann/bash-language-server][bash-language-server]]를 먼저 설치해야한다.

   #+BEGIN_SRC emacs-lisp
     (setq lsp-keymap-prefix "C-c l")

     (use-package lsp-mode
       :ensure t
       :hook ((lsp-mode . lsp-enable-which-key-integration))
       :custom (lsp-enable-on-type-formatting nil)
       :commands lsp)

     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode)

     ;; (use-package company-lsp
     ;;   :ensure t
     ;;   :commands company-lsp
     ;;   :config (push 'company-lsp company-backends))

     (use-package ccls
       :ensure t
       :hook ((c-mode c++-mode objc-mode sh-mode) .
	      (lambda () (require 'ccls) (lsp)))
       :config (setq ccls-executable "~/.local/bin/ccls"))

     (use-package helm-lsp
       :ensure t
       :commands helm-lsp-workspace-symbol)

     (use-package lsp-treemacs
       :ensure t
       :commands lsp-treemacs-errors-list)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; (setq company-transformers nil
	   ;; company-lsp-async t
	   ;; company-lsp-cache-candidates nil)
   #+END_SRC

** C/C++

   #+BEGIN_SRC emacs-lisp
     (c-add-style "my-c-style"
		  '("linux"
		    (c-basic-offset . 4)))

     (setq c-default-style "my-c-style")
   #+END_SRC

   먼저 llvm을 설치해야한다.

   #+BEGIN_SRC emacs-lisp
     (use-package clang-format
       :ensure t
       :bind (:map c-mode-base-map
		   ("C-M-\\" . clang-format-region)))
   #+END_SRC

** Arduino

   #+BEGIN_SRC emacs-lisp
     (use-package arduino-mode
       :ensure t)
   #+END_SRC

** Python
   먼저 [[https://github.com/palantir/python-language-server][Python Language Server]]를 설치해야 한다.

   #+BEGIN_SRC emacs-lisp
     (use-package python
       :mode ("\\.py\\'" . python-mode)
       :interpreter ("python3" . python-mode))

     (use-package elpy
       :ensure t
       :defer t
       :init
       (advice-add 'python-mode :before 'elpy-enable)
       :config
       (setq elpy-rpc-python-command "python3")
       (setq python-shell-interpreter "python3")
       (setq python-shell-interpreter-args "-i")
       :bind (:map elpy-mode-map
		   ("M-." . elpy-goto-definition)
		   ("M-," . pop-tag-mark)))

     (use-package pip-requirements
       :ensure t
       :config
       (add-hook 'pip-requirements-mode-hook #'pip-requirements-auto-complete-setup))

     (use-package py-autopep8
       :ensure t)
   #+END_SRC

** Emacs Lisp
   #+BEGIN_SRC emacs-lisp
     (use-package elisp-mode
       :init
       (add-hook 'emacs-lisp-mode-hook (lambda () (setq indent-tabs-mode nil)))
       :bind (:map emacs-lisp-mode-map
		   ("<f6>" . eval-buffer)
		   ("M-<f6>" . emacs-lisp-byte-compile-and-load)
		   ("<return>" . newline-and-indent)))

     (use-package ielm
       :commands ielm)

     (use-package eldoc-mode
       :hook (emacs-lisp-mode ielm-mode))

     (use-package paredit
       :ensure t
       :hook ((lisp-mode emacs-lisp-mode ielm-mode) . paredit-mode))

     (use-package rainbow-delimiters
       :ensure t
       :hook ((emacs-lisp-mode ielm-mode) . rainbow-delimiters-mode))
   #+END_SRC

** Configurations for Qt5

   #+BEGIN_SRC emacs-lisp
     (use-package qml-mode
       :ensure t)
   #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

* Docker

  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t
      :mode ("Dockerfile\\'" . dockerfile-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package docker-compose-mode
      :ensure t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package docker
      :ensure t
      :bind ("C-c d" . docker))
  #+END_SRC

* graphviz-dot-mode
  #+BEGIN_SRC emacs-lisp
    (use-package graphviz-dot-mode
      :mode ("\\.dot\\'" . graphviz-dot-mode)
      :init
      (autoload 'graphviz-dot-mode "graphviz-dot-mode" "graphviz-dot Editing Mode" t))
  #+END_SRC

* gnuplot-mode
  #+BEGIN_SRC emacs-lisp
    (use-package gnuplot-mode
      :mode ("\\.plt\\'" . gnuplot-mode)
      :config (when-windows (setq gnuplot-program "c:/pkg/gnuplot/bin/gnuplot.exe")))
  #+END_SRC

* markdown-mode
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("\\.md\\'" . markdown-mode)
      :init
      (autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t))
  #+END_SRC

* [[http://jblevins.org/projects/deft/][Deft]]
  #+BEGIN_SRC emacs-lisp
    (use-package deft
      :ensure t
      :bind ("<f9>" . deft)
      :config (setq deft-extensions '("org" "md" "txt")
		    deft-directory "~/Dropbox/wiki"
		    deft-auto-save-interval 0
		    deft-text-mode 'org-mode))
  #+END_SRC
* Tools
** Google Translater

   #+BEGIN_SRC emacs-lisp
     (use-package google-translate
       :ensure t
       :bind ("M-o t" . google-translate-at-point)
       ("M-o T" . google-translate-at-point-reverse)
       :custom
       (google-translate-default-source-language "en")
       (google-translate-default-target-language "ko"))
   #+END_SRC

** rfc-mode

   #+begin_src emacs-lisp
     (use-package rfc-mode
       :ensure t
       :init (setq rfc-mode-directory (expand-file-name "~/Dropbox/resources/rfc/")))
   #+end_src
